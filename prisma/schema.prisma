generator client {
  provider = "prisma-client-js"
}

generator fieldEncryptionMigrations {
  provider = "prisma-field-encryption"
  output   = "./migrations"
}

datasource db {
  provider          = "postgresql"
  url               = env("SUPABASE_DB_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model subscriptions {
  id           String   @id @default(uuid())
  /// @encrypted
  name         String
  /// @encrypted
  notes        String?
  url          String
  /// @encrypted
  price        String   @default("0")
  paid         String
  notify       Boolean  @default(false)
  date         String
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  user_id      String   @db.Uuid
  active       Boolean? @default(true)
  cancelled_at String?
  nameHash     String?
  user         users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model expenses {
  id         String   @id @default(uuid())
  /// @encrypted
  name       String
  /// @encrypted
  notes      String?
  /// @encrypted
  price      String   @default("0")
  paid_via   String   @default("")
  category   String
  date       String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  user_id    String   @db.Uuid
  nameHash   String?
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model income {
  id         String   @id @default(uuid())
  /// @encrypted
  name       String
  /// @encrypted
  notes      String?
  /// @encrypted
  price      String   @default("0")
  category   String
  date       String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  user_id    String   @db.Uuid
  nameHash   String?
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model investments {
  id         String   @id @default(uuid())
  /// @encrypted
  name       String
  /// @encrypted
  notes      String?
  /// @encrypted
  price      String   @default("0")
  /// @encrypted
  units      String   @default("0")
  category   String
  date       String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  user_id    String   @db.Uuid
  nameHash   String?
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model users {
  id                         String          @id @db.Uuid
  email                      String
  created_at                 DateTime        @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime        @default(now()) @updatedAt @db.Timestamptz(6)
  currency                   String          @default("INR")
  locale                     String          @default("en")
  order_identifier           String?
  order_store_id             String?
  order_number               String?
  order_status               String?
  billing_start_date         String?
  plan_status                String          @default("basic")
  trial_start_date           DateTime        @default(now()) @db.Timestamptz(6)
  usage                      Int             @default(0)
  basic_usage_limit_email    Boolean         @default(false)
  new_signup_email           Boolean         @default(false)
  premium_plan_expired_email Boolean         @default(false)
  premium_usage_limit_email  Boolean         @default(false)
  monthly_email_report       Boolean         @default(false)
  expenses                   expenses[]
  income                     income[]
  investments                investments[]
  subscriptions              subscriptions[]
}

model feedbacks {
  id         Int      @id @default(autoincrement())
  message    String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  user_id    String   @db.Uuid
}

model contact {
  id         Int      @id @default(autoincrement())
  message    String
  subject    String
  email      String
  created_at DateTime @default(now()) @db.Timestamptz(6)
}
