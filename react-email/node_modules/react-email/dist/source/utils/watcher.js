"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.watcher = exports.createWatcherInstance = void 0;
const chokidar_1 = __importDefault(require("chokidar"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const shelljs_1 = __importDefault(require("shelljs"));
const constants_1 = require("./constants");
const generate_email_preview_1 = require("./generate-email-preview");
const createWatcherInstance = (watchDir) => chokidar_1.default.watch(watchDir, {
    ignoreInitial: true,
    cwd: watchDir.split(path_1.default.sep).slice(0, -1).join(path_1.default.sep),
    ignored: /(^|[\/\\])\../,
});
exports.createWatcherInstance = createWatcherInstance;
const watcher = (watcherInstance, watchDir) => {
    watcherInstance.on('all', async (event, filename) => {
        const file = filename.split(path_1.default.sep);
        if (file[1] === undefined) {
            return;
        }
        if (event === constants_1.EVENT_FILE_DELETED) {
            if (file[1] === 'static' && file[2]) {
                await fs_1.default.promises.rm(path_1.default.join(constants_1.REACT_EMAIL_ROOT, 'public', 'static', file[2]));
                return;
            }
            await fs_1.default.promises.rm(path_1.default.join(constants_1.REACT_EMAIL_ROOT, filename));
            return;
        }
        if (file[1] === 'static' && file[2]) {
            const srcPath = path_1.default.join(watchDir, 'static', file[2]);
            const result = shelljs_1.default.cp('-r', srcPath, path_1.default.join(constants_1.REACT_EMAIL_ROOT, 'public', 'static'));
            if (result.code > 0) {
                throw new Error(`Something went wrong while copying the file to ${constants_1.PACKAGE_EMAILS_PATH}, ${result.cat()}`);
            }
            return;
        }
        try {
            await (0, generate_email_preview_1.generateEmailsPreview)(watchDir, 'templates');
        }
        catch (e) {
            throw new Error(`Something went wrong while copying the file to ${constants_1.PACKAGE_EMAILS_PATH}, ${
            // @ts-expect-error
            e?.message}`);
        }
    });
};
exports.watcher = watcher;
