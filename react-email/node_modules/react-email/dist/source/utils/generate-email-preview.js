"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateEmailsPreview = void 0;
const log_symbols_1 = __importDefault(require("log-symbols"));
const constants_1 = require("./constants");
const fs_1 = __importDefault(require("fs"));
const ora_1 = __importDefault(require("ora"));
const shelljs_1 = __importDefault(require("shelljs"));
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const glob_1 = __importDefault(require("glob"));
const close_ora_on_sigint_1 = require("./close-ora-on-sigint");
const generateEmailsPreview = async (emailDir, type = 'all') => {
    try {
        const spinner = (0, ora_1.default)('Generating emails preview').start();
        (0, close_ora_on_sigint_1.closeOraOnSIGNIT)(spinner);
        if (type === 'all' || type === 'templates') {
            await createEmailPreviews(emailDir);
        }
        if (type === 'all' || type === 'static') {
            await createStaticFiles();
        }
        spinner.stopAndPersist({
            symbol: log_symbols_1.default.success,
            text: 'Emails preview generated',
        });
    }
    catch (error) {
        console.log({ error });
    }
};
exports.generateEmailsPreview = generateEmailsPreview;
const createEmailPreviews = async (emailDir) => {
    const hasEmailsDirectory = fs_1.default.existsSync(constants_1.PACKAGE_EMAILS_PATH);
    if (hasEmailsDirectory) {
        await fs_1.default.promises.rm(constants_1.PACKAGE_EMAILS_PATH, { recursive: true });
    }
    const list = glob_1.default.sync(path_1.default.join(emailDir, '/*.{jsx,tsx}'), {
        absolute: true,
    });
    /**
     * instead of copying all files, which would break and js/ts imports,
     * we create placeholder files which just contain the following code:
     *
     * import Mail from '../../path/to/emails/my-template.tsx`
     * export default Mail
     */
    for (const absoluteSrcFilePath of list) {
        const fileName = absoluteSrcFilePath.split('/').pop();
        const targetFile = path_1.default.join(constants_1.PACKAGE_EMAILS_PATH, absoluteSrcFilePath.replace(emailDir, ''));
        const importPath = path_1.default.relative(path_1.default.dirname(targetFile), path_1.default.dirname(absoluteSrcFilePath));
        const importFile = path_1.default.join(importPath, fileName);
        // if this import is changed, you also need to update `client/src/app/preview/[slug]/page.tsx`
        const sourceCode = `import Mail from '${importFile}';export default Mail;`.replace(';', ';\n');
        await fs_extra_1.default.ensureDir(path_1.default.dirname(targetFile));
        if (fs_extra_1.default.existsSync(targetFile)) {
            if (fs_extra_1.default.readFileSync(targetFile, 'utf8') === sourceCode) {
                // file already exists, no need to trigger a rebuild.
                // can otherwise trigger the next.js rebuild multiple times
                continue;
            }
        }
        await fs_extra_1.default.writeFile(targetFile, sourceCode);
    }
};
const createStaticFiles = async () => {
    const hasPublicDirectory = fs_1.default.existsSync(constants_1.PACKAGE_PUBLIC_PATH);
    if (hasPublicDirectory) {
        await fs_1.default.promises.rm(constants_1.PACKAGE_PUBLIC_PATH, { recursive: true });
    }
    await fs_extra_1.default.ensureDir(path_1.default.join(constants_1.PACKAGE_PUBLIC_PATH, 'static'));
    const userHasStaticDirectory = fs_1.default.existsSync(path_1.default.join(constants_1.CURRENT_PATH, 'static'));
    if (userHasStaticDirectory) {
        const result = shelljs_1.default.cp('-r', path_1.default.join(constants_1.CURRENT_PATH, 'static'), path_1.default.join(constants_1.PACKAGE_PUBLIC_PATH));
        if (result.code > 0) {
            throw new Error(`Something went wrong while copying the file to ${path_1.default.join(constants_1.CURRENT_PATH, 'static')}, ${result.cat()}`);
        }
    }
};
