"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupServer = void 0;
const watcher_1 = require("./watcher");
const detect_package_manager_1 = require("detect-package-manager");
const find_root_1 = require("@manypkg/find-root");
const _1 = require(".");
const path_1 = __importDefault(require("path"));
const shelljs_1 = __importDefault(require("shelljs"));
/**
 * Utility function to run init/sync for the server in dev, build or start mode.
 *
 * @param type dev | build | start
 * @param dir Directory in which the emails are located, only for dev and build, unused for start.
 * @param port The port on which the server will run, only for dev and start, unused for build.
 */
const setupServer = async (type, dir, port) => {
    const cwd = await (0, find_root_1.findRoot)(_1.CURRENT_PATH).catch(() => ({
        rootDir: _1.CURRENT_PATH,
    }));
    const emailDir = (0, _1.convertToAbsolutePath)(dir);
    const packageManager = await (0, detect_package_manager_1.detect)({
        cwd: cwd.rootDir,
    }).catch(() => 'npm');
    // when starting, we dont need to worry about these because it should've already happened during the build stage.
    if (type !== 'start') {
        await (0, _1.generateEmailsPreview)(emailDir);
        await (0, _1.syncPkg)();
        await (0, _1.installDependencies)(packageManager);
    }
    if (type === 'dev') {
        const watcherInstance = (0, watcher_1.createWatcherInstance)(emailDir);
        (0, _1.startDevServer)(packageManager, port);
        (0, watcher_1.watcher)(watcherInstance, emailDir);
    }
    else if (type === 'build') {
        (0, _1.buildProdServer)(packageManager);
    }
    else {
        shelljs_1.default.cd(path_1.default.join(_1.REACT_EMAIL_ROOT));
        (0, _1.startProdServer)(packageManager, port);
    }
};
exports.setupServer = setupServer;
