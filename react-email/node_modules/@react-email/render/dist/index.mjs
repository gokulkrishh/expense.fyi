// src/render.ts
import * as ReactDomServer from "react-dom/server";
import { convert } from "html-to-text";
import pretty from "pretty";
var render = (component, options) => {
  if (options == null ? void 0 : options.plainText) {
    return renderAsPlainText(component, options);
  }
  const doctype = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">';
  const markup = ReactDomServer.renderToStaticMarkup(component);
  const document = `${doctype}${markup}`;
  if (options && options.pretty) {
    return pretty(document);
  }
  return document;
};
var renderAsPlainText = (component, _options) => {
  return convert(ReactDomServer.renderToStaticMarkup(component), {
    selectors: [
      { selector: "img", format: "skip" },
      { selector: "#__react-email-preview", format: "skip" }
    ]
  });
};

// src/renderAsync.ts
import { convert as convert2 } from "html-to-text";
import pretty2 from "pretty";
import { renderToReadableStream, renderToStaticMarkup as renderToStaticMarkup2 } from "react-dom/server";
async function renderToString(children) {
  const stream = await renderToReadableStream(children);
  const html = await readableStreamToString(
    stream
  );
  return html.replace(/^<!DOCTYPE html>/, "").replace(/<!-- -->/g, "");
}
async function readableStreamToString(readableStream) {
  let result = "";
  const decoder = new TextDecoder();
  for await (const chunk of readableStream) {
    result += decoder.decode(chunk);
  }
  return result;
}
var renderAsync = async (component, options) => {
  const markup = typeof renderToStaticMarkup2 === "undefined" ? await renderToString(component) : renderToStaticMarkup2(component);
  if (options == null ? void 0 : options.plainText) {
    return convert2(markup, {
      selectors: [
        { selector: "img", format: "skip" },
        { selector: "#__react-email-preview", format: "skip" }
      ]
    });
  }
  const doctype = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">';
  const document = `${doctype}${markup}`;
  if (options == null ? void 0 : options.pretty) {
    return pretty2(document);
  }
  return document;
};
export {
  render,
  renderAsync
};
