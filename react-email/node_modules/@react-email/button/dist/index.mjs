// src/button.tsx
import * as React from "react";

// src/utils/px-to-pt.ts
var pxToPt = (px) => isNaN(Number(px)) ? null : parseInt(px, 10) * 3 / 4;

// src/button.tsx
import { jsx, jsxs } from "react/jsx-runtime";
var Button = React.forwardRef(
  ({ children, style, pX, pY, target = "_blank", ...props }, forwardedRef) => {
    const y = (pY || 0) * 2;
    const textRaise = pxToPt(y.toString());
    return /* @__PURE__ */ jsxs(
      "a",
      {
        ...props,
        ref: forwardedRef,
        "data-id": "react-email-button",
        target,
        style: buttonStyle({ ...style, pX, pY }),
        children: [
          /* @__PURE__ */ jsx(
            "span",
            {
              dangerouslySetInnerHTML: {
                __html: `<!--[if mso]><i style="letter-spacing: ${pX}px;mso-font-width:-100%;mso-text-raise:${textRaise}" hidden>&nbsp;</i><![endif]-->`
              }
            }
          ),
          /* @__PURE__ */ jsx("span", { style: buttonTextStyle(pY), children }),
          /* @__PURE__ */ jsx(
            "span",
            {
              dangerouslySetInnerHTML: {
                __html: `<!--[if mso]><i style="letter-spacing: ${pX}px;mso-font-width:-100%" hidden>&nbsp;</i><![endif]-->`
              }
            }
          )
        ]
      }
    );
  }
);
Button.displayName = "Button";
var buttonStyle = (style) => {
  const { pY, pX, ...rest } = style || {};
  return {
    ...rest,
    lineHeight: "100%",
    textDecoration: "none",
    display: "inline-block",
    maxWidth: "100%",
    padding: `${pY}px ${pX}px`
  };
};
var buttonTextStyle = (pY) => {
  const paddingY = pY || 0;
  return {
    maxWidth: "100%",
    display: "inline-block",
    lineHeight: "120%",
    msoPaddingAlt: "0px",
    msoTextRaise: pxToPt(paddingY.toString())
  };
};
export {
  Button
};
